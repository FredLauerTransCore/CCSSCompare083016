/********************************************************
*
* Name: DM_DMV_INQUIRY_INFO_PROC
* Created by: DT, 4/13/2016
* Revision: 1.0
* Description: This is the template for bulk read/write
*              DM_DMV_INQUIRY_INFO
*
********************************************************/

set serveroutput on
set verify on
set echo on

CREATE OR REPLACE PROCEDURE DM_DMV_INQUIRY_INFO_PROC IS

TYPE DM_DMV_INQUIRY_INFO_TYP IS TABLE OF DM_DMV_INQUIRY_INFO%ROWTYPE 
     INDEX BY BINARY_INTEGER;
DM_DMV_INQUIRY_INFO_tab DM_DMV_INQUIRY_INFO_TYP;


P_ARRAY_SIZE NUMBER:=10000;


CURSOR C1 IS SELECT 
    0 MODIFICATION_NUM --number of times the account or plate informations were modified.
    ,'0' CONFLICT_ID
    ,e.ACCT_NUM X_ETC_ACCOUNT_ID
    ,'0' X_HIST_FLG
    ,ev.ACCT_NUM X_ACCOUNT_ID  -- JOIN TO EVENT_ADDRESS TABLE TO GAIN ACCOUNT_id
    ,ea.ADDR1 X_ADDR_LINE_1
    ,ea.ADDR2 X_ADDR_LINE_2
    ,ea.CITY X_CITY
    ,ea.ID X_CONTACT_ID
    ,ea.COUNTRY_CODE X_COUNTRY
    ,CASE WHEN srs.REG_STOP_SENT_ON IS NOT NULL AND srs.REG_STOP_REMOVAL_SENT_ON IS NULL
          THEN 'Y'  --srs.REG_STOP 
          ELSE 'N'
      END X_DMV_STATUS  -- IF REG_STOP_SENT_ON IS NOT NULL AND REG_REMOVAL_SENT_ON IS NULL THEN  REG_STOP ELSE 'N' 
    ,eo.FIRST_NAME X_FST_NAME
    ,eo.LAST_ORG_NAME X_LAST_NAME
    ,ev.PLATE X_PLATE_NUM
    ,CASE WHEN REG_STOP_SENT_ON IS NOT NULL 
          THEN 'Y' 
          ELSE 'N'
      END X_SEND_DMV  -- IF REG_STOP_SENT_ON IS NOT NULL THEN 'Y' ELSE 'N'
    ,ea.STATE_ABBR X_STATE
    ,'00000' X_STATUS
    ,NULL X_TOD_ID
    ,ea.ZIP X_ZIPCODE
    ,e.OWNER_ID CREATED
    ,e.CREATED_ON CREATED_BY
    ,SYSDATE LAST_UPD
    ,NULL LAST_UPD_BY
FROM EVENT_OWNER_ADDR_VEHICLE_ACCT e
    ,EVENT_ADDRESS ea
    ,EVENT_VEHICLE ev
    ,EVENT_OWNER eo
--    ,PA_LANE_TXN lt
WHERE e.OWNER_ID = eo.ID
AND e.ADDRESS_ID = ea.ID
AND e.VEHICLE_ID = ev.ID
; 
-- Source

-- EXTRACT RULE - 
--select * 
--Join OAVA_LINK_ID of PA_LANE_TXN to ID of EVENT_OWNER_ADDR_VEHICLE_ACCT 
--AND OWNER_ID of EVENT_OWNER_ADDR_VEHICLE_ACCT to ID of EVENT_OWNER 
--AND ADDRESS_ID of EVENT_OWNER_ADDR_VEHICLE_ACCT to ID of EVENT_ADDRESS 
--AND VEHICLE_ID of EVENT_OWNER_ADDR_VEHICLE_ACCT to ID of EVENT_VEHICLE

BEGIN
 
  OPEN C1;  

  LOOP

    /*Bulk select */
    FETCH C1 BULK COLLECT INTO DM_DMV_INQUIRY_INFO_tab
    LIMIT P_ARRAY_SIZE;


    /*ETL SECTION BEGIN

      ETL SECTION END*/

    /*Bulk insert */ 
    FORALL i in DM_DMV_INQUIRY_INFO_tab.first .. DM_DMV_INQUIRY_INFO_tab.last
           INSERT INTO DM_DMV_INQUIRY_INFO VALUES DM_DMV_INQUIRY_INFO_tab(i);
                       
    EXIT WHEN C1%NOTFOUND;
  END LOOP;

  COMMIT;

  CLOSE C1;

  COMMIT;

  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('ERROR CODE: '||SQLCODE);
     DBMS_OUTPUT.PUT_LINE('ERROR MSG: '||SQLERRM);
END;
/
SHOW ERRORS


