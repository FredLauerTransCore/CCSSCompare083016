/********************************************************
*
* Name: DM_INVOICE_INFO_PROC
* Created by: RH, 4/18/2016
* Revision: 1.0
* Description: This is the template for bulk read/write
*              DM_INVOICE_INFO
*
********************************************************/

set serveroutput on
set verify on
set echo on

CREATE OR REPLACE PROCEDURE DM_INVOICE_INFO_PROC IS

TYPE DM_INVOICE_INFO_TYP IS TABLE OF DM_INVOICE_INFO%ROWTYPE 
     INDEX BY BINARY_INTEGER;
DM_INVOICE_INFO_tab DM_INVOICE_INFO_TYP;


P_ARRAY_SIZE NUMBER:=10000;


CURSOR C1 IS SELECT 
    ACCT_NUM ACCOUNT_NUMBER
    ,DOCUMENT_ID INVOICE_NUMBER
    ,CREATED_ON INVOICE_DATE
    ,NULL STATUS
    ,NULL ESCALATION_LEVEL
    ,DOCUMENT_START START_DATE
    ,DOCUMENT_END END_DATE
    ,PREV_DUE OPENING_BALANCE
    ,(PREV_DUE + TOLL_CHARGED + FEE_CHARGED + PAYMT_ADJS) CLOSING_BALANCE
    ,NULL CREDITS 
    -- JOIN DOCUMENT_INFO_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of VB_ACTIVITY returns PAID_TXN_DETAILS
-- UNION ALL JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of ST_ACTIVITY_PAID returns PAID_TXN_DETAILS PAID_AMT + DISMISSED_AMT
    ,SUM(TOLL_CHARGED + FEE_CHARGED) PAYABALE
    ,(PREV_DUE + TOLL_CHARGED + FEE_CHARGED + PAYMT_ADJS) INVOICE_AMT
    ,PAYMT_ADJS PAYMENTS
    ,PAYMT_ADJS ADJUSTMENTS
    ,NULL IS_ESCALATION_EXMPT
    ,NULL PAYMENT_DUE_DT
    ,NULL DISCOUNT_ELIGIBLE_CHARGES
    ,0 DISCOUNTS
    ,0 MILEGE
    ,DOC_TYPE_ID INVOICE_TYPE
    ,CREATED_ON CREATED
    ,NULL CREATED_BY
    ,CREATED_ON LAST_UPD
    ,NULL LAST_UPD_BY
    ,NULL SOURCE_SYSTEM
  FROM ST_DOCUMENT_INFO
  ; -- Source

--STATUS
--ST_DOCUMENT_INFO.DOCUMENT_INFO_ID = VB_ACTIVITY.DOCUMENT_ID
--
--JOIN DOCUMENT_INFO_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of VB_ACTIVITY returns UNPAID_TXN_DETAILS
--UNION ALL JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of ST_ACTIVITY_PAID returns PAID_TXN_DETAILS
--IF UNPAID_AMT > 0 THEN 'OPEN' ELSE 'CLOSED'  (Need PAID_TXN_DETAILS definition from FTE); 
--
--ST_ACTIVITY_PAID.LEDGER_ID = KS_LEDGER.ID
--
--JOIN LEDGER_ID OF ST_ACTIVITY_PAID to ID OF KS_LEDGER returns ORIGINAL_AMT from KS_LEDGER 
--AND DISPUTED_AMT FROM ST_ACTIVITY_PAID; 
--Use idfference to determine if dismissed or not (IF 0 THEN 'DISPUTED' ELSE 'CLOSED') 

BEGIN
 
  OPEN C1;  

  LOOP

    /*Bulk select */
    FETCH C1 BULK COLLECT INTO DM_INVOICE_INFO_tab
    LIMIT P_ARRAY_SIZE;


    /*ETL SECTION BEGIN

      ETL SECTION END*/

    /*Bulk insert */ 
    FORALL i in DM_INVOICE_INFO_tab.first .. DM_INVOICE_INFO_tab.last
           INSERT INTO DM_INVOICE_INFO VALUES DM_INVOICE_INFO_tab(i);
                       
    EXIT WHEN C1%NOTFOUND;
  END LOOP;

  COMMIT;

  CLOSE C1;

  COMMIT;

  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('ERROR CODE: '||SQLCODE);
     DBMS_OUTPUT.PUT_LINE('ERROR MSG: '||SQLERRM);
END;
/
SHOW ERRORS


