/********************************************************
*
* Name: DM_INVOICE_INFO_PROC
* Created by: RH, 5/18/2016
* Revision: 1.0
* Description: This is the template for bulk read/write
*              DM_INVOICE_INFO
*
********************************************************/

set serveroutput on
set verify on
set echo on

CREATE OR REPLACE PROCEDURE DM_INVOICE_INFO_PROC IS

TYPE DM_INVOICE_INFO_TYP IS TABLE OF DM_INVOICE_INFO%ROWTYPE 
     INDEX BY BINARY_INTEGER;
DM_INVOICE_INFO_tab DM_INVOICE_INFO_TYP;


P_ARRAY_SIZE NUMBER:=10000;


CURSOR C1 IS SELECT 
    di.ACCT_NUM ACCOUNT_NUMBER
    ,di.DOCUMENT_ID INVOICE_NUMBER
    ,trunc(di.CREATED_ON) INVOICE_DATE  -- date only
    ,NULL STATUS  -- Derived
--VB_ACTIVITY table 
--FOR BANKRUPTCY_FLAG NULL and COLL_COURT_FLAG NULL
--IF DOCUMENT_ID is null, then 'UNBILLED'
--IF DOCUMENT_ID is not null and CHILD_DOC_ID IS NULL, then 'INVOICED'
--IF DOCUMENT_ID is not null and CHILD_DOC_ID IS NOT NULL, then 'ESCALATED'
--IF DOCUMENT_ID is not null and CHILD_DOC_ID like '%-%', then 'UTC'
--
--FOR BANKRUPTCY_FLAG NULL and COLL_COURT_FLAG NOT NULL
--IF DOCUMENT_ID is not null and CHILD_DOC_ID IS NOT NULL  and COLL_COURT_FLAG is 'COLL' THEN 'COLLECTION'
--IF DOCUMENT_ID is not null and CHILD_DOC_ID IS NOT NULL  and COLL_COURT_FLAG is 'CRT' THEN 'COURT'
--
--FOR BANKRUPTCY _FLAG NOT NULL
--IF BANKRUPTCY _FLAG is not null, then 'BANKRUPTCY'

    ,CASE WHEN va.BANKRUPTCY_FLAG is NOT null THEN 'BANKRUPTCY'
          WHEN va.COLL_COURT_FLAG is null and
               va.DOCUMENT_ID is null THEN 'UNBILLED'
          WHEN va.COLL_COURT_FLAG is null and
               va.DOCUMENT_ID is NOT null and
               va.CHILD_DOC_ID is null THEN 'INVOICED'
          WHEN va.COLL_COURT_FLAG is null and
               va.DOCUMENT_ID is NOT null and
               va.CHILD_DOC_ID is NOT null THEN 'ESCALATED'
          WHEN va.COLL_COURT_FLAG is null and
               va.DOCUMENT_ID is NOT null and
               va.CHILD_DOC_ID like '%-%' THEN 'UTC'
          WHEN va.COLL_COURT_FLAG is NOT null and
               va.DOCUMENT_ID is NOT null and
               va.CHILD_DOC_ID is NOT null and
               va.COLL_COURT_FLAG = 'COLL' THEN 'COLLECTION'
          WHEN va.COLL_COURT_FLAG is NOT null and
               va.DOCUMENT_ID is NOT null and
               va.CHILD_DOC_ID is NOT null and
               va.COLL_COURT_FLAG = 'CRT' THEN 'COURT'
          ELSE NULL
      END ESCALATION_LEVEL  -- Derived
    ,DOCUMENT_START START_DATE
    ,DOCUMENT_END END_DATE
    ,di.PREV_DUE OPENING_BALANCE
    ,(di.PREV_DUE + di.TOLL_CHARGED + di.FEE_CHARGED + di.PAYMT_ADJS) CLOSING_BALANCE
    ,NULL CREDITS 
-- JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to 
--      DOCUMENT_ID of VB_ACTIVITY 
-- returns PAID_TXN_DETAILS
---- UNION ALL 
-- JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to 
--      DOCUMENT_ID of ST_ACTIVITY_PAID 
-- returns PAID_TXN_DETAILS PAID_AMT + DISMISSED_AMT
-- What is PAID_TXN_DETAILS and DISMISSED_AMT ??
    ,(va.TOTAL_AMT_PAID + va.AMT_CHARGED + va.LAST_PAYMENT_AMT + ap.TOTAL_AMT_PAID + ap.AMT_CHARGED) CREDITS 
    ,(di.TOLL_CHARGED + di.FEE_CHARGED) PAYABALE
    ,(di.PREV_DUE + di.TOLL_CHARGED + di.FEE_CHARGED + di.PAYMT_ADJS) INVOICE_AMT
    ,(va.TOTAL_AMT_PAID + ap.TOTAL_AMT_PAID) PAYMENTS   -- 
--  JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of VB_ACTIVITY 
-- returns UNPAID_TXN_DETAILS
-- UNION ALL 
-- JOIN DOCUMENT_ID from ST_DOCUMENT_INFO to DOCUMENT_ID of ST_ACTIVITY_PAID 
-- returns PAID_TXN_DETAILS 
--AMOUNT_CHARGED NOT EQUAL 0 AND 
-- IF AMOUNT_CHARGED - TOTAL_AMOUNT_PAID = 0 THEN 0 
-- ELSE IF AMOUNT_CHARGED = 0 THEN AMT_DISMISSED
/* Partial Dismissal */
-- JOIN LEDGER_ID OF ST_ACTIVITY_PAID to ID OF KS_LEDGER 
-- returns AMOUNT from KS_LEDGER 
-- AND AMT_CHARGED FROM ST_ACTIVITY_PAID RETURN AMOUNT - AMT_CHARGED
    ,di.PAYMT_ADJS ADJUSTMENTS
    ,'N' IS_ESCALATION_EXMPT
--    ,SUM(MAILED_ON+25) PAYMENT_DUE_DT
    ,NULL DISCOUNT_ELIGIBLE_CHARGES
    ,0 DISCOUNTS
    ,0 MILEGE
    ,di.DOC_TYPE_ID INVOICE_TYPE
    ,di.CREATED_ON CREATED
--    ,NULL CREATED_BY
--    ,CREATED_ON LAST_UPD
    ,NULL LAST_UPD_BY
    ,'SUNTOLL' SOURCE_SYSTEM
  FROM PATRON.ST_DOCUMENT_INFO di
      ,PATRON.VB_ACTIVITY va
      ,PATRON.ST_ACTIVITY_PAID ap
  WHERE di.DOCUMENT_ID = va.DOCUMENT_ID (+)  
    AND di.DOCUMENT_ID = ap.DOCUMENT_ID (+) 
  ; -- Source

BEGIN
 
  OPEN C1;  

  LOOP

    /*Bulk select */
    FETCH C1 BULK COLLECT INTO DM_INVOICE_INFO_tab
    LIMIT P_ARRAY_SIZE;

-- ETL SECTION BEGIN

-- IF UNPAID_AMT > 0 THEN 'OPEN' ELSE 'CLOSED'  (Need PAID_TXN_DETAILS definition from FTE); 
-- JOIN LEDGER_ID OF ST_ACTIVITY_PAID to ID OF KS_LEDGER returns ORIGINAL_AMT from KS_LEDGER AND DISPUTED_AMT FROM ST_ACTIVITY_PAID; 
-- Use idfference to determine if dismissed or not (IF 0 THEN 'DISPUTED' ELSE 'CLOSED') 

-- ETL SECTION END

    /*Bulk insert */ 
    FORALL i in DM_INVOICE_INFO_tab.first .. DM_INVOICE_INFO_tab.last
           INSERT INTO DM_INVOICE_INFO VALUES DM_INVOICE_INFO_tab(i);
                       
    EXIT WHEN C1%NOTFOUND;
  END LOOP;

  COMMIT;

  CLOSE C1;

  COMMIT;

  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('ERROR CODE: '||SQLCODE);
     DBMS_OUTPUT.PUT_LINE('ERROR MSG: '||SQLERRM);
END;
/
SHOW ERRORS


